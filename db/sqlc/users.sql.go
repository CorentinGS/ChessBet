// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, points, email_address) VALUES ($1, $2, $3) RETURNING user_id, username, points, oauth_id, email_address
`

type CreateUserParams struct {
	Username     string
	Points       int32
	EmailAddress string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Points, arg.EmailAddress)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE user_id = $1 RETURNING user_id, username, points, oauth_id, email_address
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, points, oauth_id, email_address FROM users WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, points, oauth_id, email_address FROM users WHERE email_address = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, emailAddress string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, emailAddress)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}

const getUserByOauthId = `-- name: GetUserByOauthId :one
SELECT user_id, username, points, oauth_id, email_address FROM users WHERE oauth_id = $1
`

func (q *Queries) GetUserByOauthId(ctx context.Context, oauthID *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOauthId, oauthID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, points, oauth_id, email_address FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Points,
			&i.OauthID,
			&i.EmailAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET username = $2, points = $3 WHERE user_id = $1 RETURNING user_id, username, points, oauth_id, email_address
`

type UpdateUserParams struct {
	UserID   int32
	Username string
	Points   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.UserID, arg.Username, arg.Points)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Points,
		&i.OauthID,
		&i.EmailAddress,
	)
	return i, err
}
