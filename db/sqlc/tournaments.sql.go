// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournaments.sql

package db

import (
	"context"
	"time"
)

const createTournament = `-- name: CreateTournament :one
INSERT INTO tournaments (name, start_date, end_date, lichess_tournament_id) VALUES ($1, $2, $3, $4) RETURNING tournament_id, name, start_date, end_date, lichess_tournament_id
`

type CreateTournamentParams struct {
	Name                string
	StartDate           time.Time
	EndDate             time.Time
	LichessTournamentID string
}

func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (Tournament, error) {
	row := q.db.QueryRow(ctx, createTournament,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.LichessTournamentID,
	)
	var i Tournament
	err := row.Scan(
		&i.TournamentID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.LichessTournamentID,
	)
	return i, err
}

const deleteTournament = `-- name: DeleteTournament :one
DELETE FROM tournaments WHERE tournament_id = $1 RETURNING tournament_id, name, start_date, end_date, lichess_tournament_id
`

func (q *Queries) DeleteTournament(ctx context.Context, tournamentID int32) (Tournament, error) {
	row := q.db.QueryRow(ctx, deleteTournament, tournamentID)
	var i Tournament
	err := row.Scan(
		&i.TournamentID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.LichessTournamentID,
	)
	return i, err
}

const getTournament = `-- name: GetTournament :one
SELECT tournament_id, name, start_date, end_date, lichess_tournament_id FROM tournaments WHERE tournament_id = $1
`

func (q *Queries) GetTournament(ctx context.Context, tournamentID int32) (Tournament, error) {
	row := q.db.QueryRow(ctx, getTournament, tournamentID)
	var i Tournament
	err := row.Scan(
		&i.TournamentID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.LichessTournamentID,
	)
	return i, err
}

const getTournamentInProgress = `-- name: GetTournamentInProgress :many
SELECT tournament_id, name, start_date, end_date, lichess_tournament_id FROM tournaments WHERE start_date <= now() AND end_date >= now()
`

func (q *Queries) GetTournamentInProgress(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.Query(ctx, getTournamentInProgress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tournament
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.TournamentID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.LichessTournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentPast = `-- name: GetTournamentPast :many
SELECT tournament_id, name, start_date, end_date, lichess_tournament_id FROM tournaments WHERE end_date < CURRENT_DATE
`

func (q *Queries) GetTournamentPast(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.Query(ctx, getTournamentPast)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tournament
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.TournamentID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.LichessTournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentUpcoming = `-- name: GetTournamentUpcoming :many
SELECT tournament_id, name, start_date, end_date, lichess_tournament_id FROM tournaments WHERE start_date > CURRENT_DATE
`

func (q *Queries) GetTournamentUpcoming(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.Query(ctx, getTournamentUpcoming)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tournament
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.TournamentID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.LichessTournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournaments = `-- name: GetTournaments :many
SELECT tournament_id, name, start_date, end_date, lichess_tournament_id FROM tournaments
`

func (q *Queries) GetTournaments(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.Query(ctx, getTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tournament
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.TournamentID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.LichessTournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTournament = `-- name: UpdateTournament :one
UPDATE tournaments SET name = $2, start_date = $3, end_date = $4, lichess_tournament_id = $5 WHERE tournament_id = $1 RETURNING tournament_id, name, start_date, end_date, lichess_tournament_id
`

type UpdateTournamentParams struct {
	TournamentID        int32
	Name                string
	StartDate           time.Time
	EndDate             time.Time
	LichessTournamentID string
}

func (q *Queries) UpdateTournament(ctx context.Context, arg UpdateTournamentParams) (Tournament, error) {
	row := q.db.QueryRow(ctx, updateTournament,
		arg.TournamentID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.LichessTournamentID,
	)
	var i Tournament
	err := row.Scan(
		&i.TournamentID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.LichessTournamentID,
	)
	return i, err
}
