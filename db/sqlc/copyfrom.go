// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateMatches implements pgx.CopyFromSource.
type iteratorForCreateMatches struct {
	rows                 []CreateMatchesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateMatches) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateMatches) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TournamentID,
		r.rows[0].Player1ID,
		r.rows[0].Player2ID,
		r.rows[0].MatchDate,
		r.rows[0].RoundName,
		r.rows[0].LichessRoundID,
		r.rows[0].LichessGameID,
		r.rows[0].MatchResult,
	}, nil
}

func (r iteratorForCreateMatches) Err() error {
	return nil
}

func (q *Queries) CreateMatches(ctx context.Context, arg []CreateMatchesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"matches"}, []string{"tournament_id", "player1_id", "player2_id", "match_date", "round_name", "lichess_round_id", "lichess_game_id", "match_result"}, &iteratorForCreateMatches{rows: arg})
}
