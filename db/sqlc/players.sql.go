// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: players.sql

package db

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (name, rating) VALUES ($1, $2) RETURNING player_id, name, rating
`

type CreatePlayerParams struct {
	Name   string
	Rating int32
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.Name, arg.Rating)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.Rating)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :one
DELETE FROM players WHERE player_id = $1 RETURNING player_id, name, rating
`

func (q *Queries) DeletePlayer(ctx context.Context, playerID int32) (Player, error) {
	row := q.db.QueryRow(ctx, deletePlayer, playerID)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.Rating)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT player_id, name, rating FROM players WHERE player_id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, playerID int32) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, playerID)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.Rating)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT player_id, name, rating FROM players
`

func (q *Queries) GetPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, getPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(&i.PlayerID, &i.Name, &i.Rating); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE players SET name = $2, rating = $3 WHERE player_id = $1 RETURNING player_id, name, rating
`

type UpdatePlayerParams struct {
	PlayerID int32
	Name     string
	Rating   int32
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayer, arg.PlayerID, arg.Name, arg.Rating)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.Rating)
	return i, err
}
